(''\___DONE____/'')
1)based off example driver
2)example driver renamed to nxt driver
3)nxt driver split into 2 files, .cc and .h
4)added nxt comms file
5)added struct usbdevice and devopen function from NXT++ to nxt comms file
6)modified  NXT::Setup() in nxt driver to use devopen and usbdevice to connect to nxt
7)modified constructor initializer and process position 2d config 
in nxtdriver constructor (well documented in player stage manuel)
8)added really dumb testing drive function to nxtcomms
9)added really dumb testing drive velocity message processing to processmessages in nxt driver
10)wrote really dumb nxt-roam to send really  dumbe drive message to really dumb messageprocessor 
to call really dumb drive function 
11)NXT DRIVES!!!!!
12)tweaked drive function, nxt drives foward back left & right, but uses really bad math for diagnols.
13)updated to player 3.0
14)added working sonar functions to nxtcomms, not supported by nxtdriver.... yet!
15)added sonar options to config file
16)added sonar initiation to driver main initiation
17)added sonar update function which is called in each iteration of the main loop, SONAR NOW WORKS!!!!
18)added generic close sensor on port funvtion to nxt comms
19)added light open and read runctions (active and passive)
20)added light to config parse
21)added update light function(light is a ranger proxy)
22)proccesed message for set light power, this switches all the lights between active and passive
23)added functions to open and read sound values
24)updated config parsing to recognise both sound and light rangers added usage info to nxt.cfg
25)added update sound function now driver supports sound
26)added bumper, just pretend i wrote this as 3 steps like the previous sensors
27)aded gripper, repeat.....

(''\___TODO____/'')
1)figure out what needs to be done for NXT::Shutdown() in nxt driver, and do it
2)
3)
